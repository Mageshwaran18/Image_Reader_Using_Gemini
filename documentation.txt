Documentation for Gemini Application

1. `load_dotenv()`
   - Functionality: Loads environment variables from a .env file.
   - Purpose: Ensures sensitive information like API keys are not hard-coded into the application.

2. Import Statements
   - `import streamlit as st`: Imports Streamlit library for building web applications.
   - `import os`: Imports the OS module to interact with the operating system.
   - `from PIL import Image`: Imports the Image module from the Python Imaging Library (PIL) for image processing.
   - `import google.generativeai as genai`: Imports the Generative AI module from the Google AI library.

3. `genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))`
   - Functionality: Configures the Generative AI module with the API key obtained from the environment variables.
   - Purpose: Allows access to Google's Generative AI models using the provided API key.

4. `model = genai.GenerativeModel('gemini-pro-vision')`
   - Functionality: Initializes the GenerativeModel with the specified model name ('gemini-pro-vision').
   - Purpose: Prepares the Generative AI model for generating content related to invoice images.

5. `get_gemini_response(input, image, prompt)`
   - Functionality: Generates content based on the input prompt, image, and additional prompt using the configured Generative AI model.
   - Parameters:
     - input: Text input prompt.
     - image: Image data.
     - prompt: Additional text prompt.
   - Returns: Generated response text.
   - Purpose: Provides a convenient function to generate responses related to invoice images.

6. `input_image_details(uploaded_file)`
   - Functionality: Processes the uploaded image file and prepares it for input to the Generative AI model.
   - Parameters:
     - uploaded_file: Uploaded image file.
   - Returns: Image data formatted for model input.
   - Purpose: Converts the uploaded image into a format suitable for analysis by the Generative AI model.

7. Streamlit App Initialization
   - Purpose: Sets up the Streamlit application with appropriate page configurations and headers.

8. User Interface Components
   - `st.header("Gemini Application")`: Displays a header for the application.
   - `st.text_input("Input Prompt: ", key="input")`: Text input field for providing prompts.
   - `st.file_uploader("Choose an image of the invoice..", type=["jpg","jpeg","png"])`: File uploader for uploading invoice images.
   - `st.image(image, caption="Uploaded Image", use_column_width=True)`: Displays the uploaded image.

9. Handling User Input
   - Workflow: 
     - Users provide a text input prompt and upload an image of an invoice.
     - Upon clicking the "Tell me about the invoice" button, the input prompt, image data, and a predefined prompt are passed to the get_gemini_response function.
     - The Generative AI model generates a response based on the provided inputs.
     - The response is displayed to the user below the submit button.

10. Summary
   - The Gemini Application allows users to provide input prompts and upload images of invoices.
   - It utilizes Google's Generative AI model ('gemini-pro-vision') to generate responses based on the input prompts and uploaded images.
   - Responses are displayed to the user for further analysis or interpretation.
